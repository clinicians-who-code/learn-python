---
title: "Coding environment"
subtitle: Module 1
author: "Mark Bailey"
format: revealjs
logo: /images/cwc-logo.png
css: /slides.css
title-slide-attributes:
    data-background-image: /images/python-scales.jpg
highlight-style: tango
---


## What are computers? {background-image="/images/yes-no-hands.jpg" background-opacity="0.4"}

* At its core, a computer is essentially a device that answers `yes-no questions`.
* It answers these simple questions very very quickly.
* By asking the computer millions of these yes-no questions, it can calculate answers to very complex questions.


## How do computers think? {.smaller background-image="/images/old-computer.jpg" background-opacity="0.3"}

* Confused by the last statement? Let me expand...
* Computers have lots of components to enable them to work. 
    * Screen to show you its output. 
    * Keyboard and mouse to allow you to communicate with the computer.
    * Inside the computer's chassis:
        * Hard drives
        * Memory sticks
        * Fans
        * Power supplies
        * Motherboards
        * Processors
* The processor of a computer is where all of the `thinking` takes place.


## How do computers think? {background-image="/images/old-computer.jpg" background-opacity="0.3"}

* The processor is where these `yes-no questions` are undertaken.
* The processor receives instructions in `binary` form. 
* Binary is basically a string of `1`s and `0`s (eg 01001011).
* As modern computers communicate in binary (yes-no) form, they are said to be `digital`.
* The processor reads these binary instructions.
* Each instruction results in either a `True` or `False` *answer* (aka `yes-no answer`). The `output` (aka *answer*) is also in binary.


## So how do we communicate with computers?{background-image="/images/digital-self.jpg" background-opacity="0.3"}

* So computers listen, think and talk in binary.
* We need a method to communicate with them, to get them to do what we want them to do.
* This is where programming languages come into play.


## Programming languages {.smaller background-image="/images/syntax-hard.jpg" background-opacity="0.2"}

* There are over 9000 programming languages, but much less than this in routine use.
* A programming language is written in *somewhat* of a human readable form (depends on the langauge).
* Popular langauges include:
    * Javascript / typescript
    * C++
    * Go
    * Java
    * Swift
    * R
    * Python


## Translation

* When you have written your code in your favourite programming language, a software program (called the interpreter or compiler) reads your code and translates it into `1`s and `0`s which the computer can then read and act upon.

# <span style="font-size: smaller;">OK, so you can write some code. What do you put in the code. How do you tell the computer what to do?</span>


## What is in a code?

* You need different elements in your code to be able to tell the computer what to do. These include:
    * Variables
    * Operators
    * Expressions
    * Flow control
    * Functions
    * Error handling
    * More advanced functionalities


## Variables

* A single variable is a space in the computer's memory.
* Simple inbuilt variables include:

```{.python filename="variables_simple.py"}
a_string = "I am a string"
an_integer = 11
a_float = 8.04
a_boolean = True
```


## Variables

* More complex variables include:
```{.python filename="variables_more_complex.py"}
a_list = ["first element of list", "second element of list"]
another_list = [1,5,3,6]
a_dictionary = {
    "1st key": "1st value",
    "2nd key": "2nd value",
}
a_tuple = (1,2,3,4,6,7)
a_set = {4,2,5,3}
```


## Spaces

* Variables names **cannot have spaces**, if you add a space, the computer will read this as two separate variables:

```{.python filename="spaces.py"}
variable_a = "I am a variable"
variable b = "The added space will cause an error"
```
Syntax error:

        Cell In[1], line 2
            variable b = "The added space will cause an error"
                     ^
        SyntaxError: invalid syntax

## Double or single quotation marks?

* You will see people using 'single' and also "double" quotation marks. It does not matter which you chose, but be consistent. If you accidently mix pairs of quotation marks you will get strange errors

```{.python filename="quotation_marks.py"}
variable_a = "All good here with two single qoutation marks"
variable_b = "I have the wrong matching qoutation marks'
variable_c = 'Single qoutation marks'
```

* Suddenly `variable_c` is part of the string for `variable_b`

## Using both types of Quotation marks

* You can embed qoutation marks within each other

```{.python filename="quotation_marks.py"}
variable_a = "I want to highlight 'this' word"
variable_b = 'I would like to show you "this"'
```

## Indentation

* Python is extremely sensitive to indentation. One extra space or tab in front of a line of code (an expression) and you will not hear the end of it in terms of errors or strange results. You use a tab for a line of code to show the computer which previous statement it relates to.


## Indentation

```{.python filename="indentation.py"}
if door_locked == True:
    if key_in_door == True:
        turn_key()
        door_locker = False
        print("Door has been unlocked")
    else:
        print("Door locked and cannot be opened")
else:
    print("Door already unlocked")

print("Done")
```

Output (if door locked and key in door)

        "Door has been unlocked"
        "done"



## Indentation

```{.python filename="indentation.py"}
if door_locked == True:
    if key_in_door == True:
        turn_key()
        door_locker = False
        print("Door has been unlocked")
    else:
        print("Door locked and cannot be opened")
else:
    print("Door already unlocked")

    print("Done")
```


Output (if door locked and key in door)

        "Door has been unlocked"

## Naming conventions {.smaller}

* There are several naming conventions for programming languages. In python, conventions are:
    * Variables, functions and methods
        * `snake_case`
    * Contants
        * `CONSTANT_CASE`
    * Classes (a higher organisation method in python)
        * `CamelCase`
    * Modules (a file with python code inside)
        * `snake_case`
    * Packages (a collection of modules)
        * `lowercasepackagenames`


## Basic Operators

* Operators manipulate and compare data (which are stored in variables). Operator types include:
    * Arithmetic: `+ - * /`
    * Comparison: `== > < `
    * Logical: `and or not`
    * Assignment: `= += -= *=`


## More Advanced Operators

* These include:
    * Bitwise: `& | ^ << >>`
    * Membership: `in   not in`
    * Identity: `is   is not`

# <span style="font-size: smaller;">OK, so you can create variables, change them and compare them. What next?</span>


## Control Flow - if statements

```{.python filename="if_statement.py"}
sky = "dark"

if sky == "blue":
    time_of_day = "day time"
elif sky == "grey"
    time_of_day = "dusk or dawn"
else:
    time_of_day = "night time"

print("Time of day is: ", time_of_day)
```

Output

        Time of day is: night time


## Control Flow - for loops
```{.python filename="for_loop.py"}
list_of_numbers = [1, 2, 3, 4, 5]

for number in list_of_numbers:
    print(number)
```

Output

        1
        2
        3
        4
        5


## Control Flow - while loops
```{.python filename="while_loop.py"}
count = 1

while count <= 5:
    print(count)
    count += 1
```

Output

        1
        2
        3
        4
        5

## Functions (methods)

* Blocks of reusable code that perform a specific task. 
* Help in organizing code and making it more modular.
* Part of the `DRY` (`do not repeat yourself`) philosophy.
* A `method` is just a function, used within a class (a higher organisation method in python)

## Functions (methods)

```{.python filename="functions.py"}
def name_of_function(argument_1, argument_2):
    a_variable = argument_1 + argument_2
    another_variable = "a return value"

    print (a_variable)

    return another_variable
```

## Other things to be aware of {.smaller}

* There are several other organisational practices in python, but we will leave these for another day.
* Just so you are aware, these are:
    * classes
    * modules
    * packages
* There are also some fancy syntax practices,
* Reading inputs from the terminal,
* File handling,
* Object oriented programming.

## Error Handling

* Error handling is one of the most important concepts to understand and problem solve. You will be spending 25-50% of  your time `debugging`.
* `Debugging` is the practice of looking for bugs (errors in the code) and trying to fix them.
* When an error happens in python, an `exception` is raised. You then use the `traceback` to try and find the cause of the error.

## Error Handling

* You can catch errors directly in your code, if you know an error might happen at a set location

```{.python filename="functions.py"}
try:
    variable = 1 + "a"
except:
    print("I knew that you could not add an integer and a string!")
else:
    print("Somehow I did not get an error!")
```

Output

        I knew that you could not add an integer and a string!

## The Traceback

* At first, this looks like a very complicated output

        Traceback (most recent call last):
            File "/User/a_user/code/error_in_code.py", line 28, in <module>
                print(fruit_prices.get_price("pear"))
            File "/User/a_user/code/error_in_code.py", line 21, in get_price
                return self._price(fruit)
            File "/User/a_user/code/error_in_code.py", line 24, in _price
                return self.prices[fruit]
        KeyError: 'pear'


## The Traceback

* When reading a Traceback, alwas read from the last line up.

        Traceback (most recent call last):
            File "/User/a_user/code/error_in_code.py", line 28, in <module>
                print(fruit_prices.get_price("pear"))
            File "/User/a_user/code/error_in_code.py", line 21, in get_price
                return self._price(fruit)
            File "/User/a_user/code/error_in_code.py", line 24, in _price
                return self.prices[fruit]
        ==> KeyError: 'pear' <==

## Compare the Traceback to the code

* Compare against the code

```{.python filename="functions.py"}
class FruitPrices:
    def __init__(self):
        self.prices = {"apple": 1.55, "banana": 2.44}

    def get_price(self, fruit):
        return self._price(fruit)

    def _price(self, fruit):
        return self.prices[fruit]


fruit_prices = FruitPrices()

print(fruit_prices.get_price("pear")) # 'pear' key does not exist!
```

## You got all that?

* Now it is your turn
* Time for some hands on coding lessions

## Computers are pedantic!

* **Remember** that computers think in `True` and `False`, `1` and `0`s. They are literal thinkers. Even one character being out of place can break an entire code base. So watch out for that unpaired quotation mark, look out for that space that should not be there, make sure you match your indentiations to your if statements.
* Now go have some fun in your groups with hands-on coding and debugging.
